// ÊµãËØï‰∏çÂêåÈ£éÊ†ºÁöÑÊïàÊûú
const testStyleDifferences = async () => {
  console.log('üé® ÊµãËØï‰∏çÂêåÈ£éÊ†ºÁöÑÊïàÊûú...');
  console.log('');

  const testCases = [
    {
      name: 'Âä®Êº´È£éÊ†º',
      prompt: 'cute magical girl character',
      style: 'anime',
      expectedKeywords: ['anime', 'cel-shaded', 'vibrant colors', 'manga style']
    },
    {
      name: 'ÂÜôÂÆûÈ£éÊ†º',
      prompt: 'cute magical girl character',
      style: 'realistic',
      expectedKeywords: ['realistic', 'photorealistic', 'realistic materials', 'lifelike']
    },
    {
      name: 'Âç°ÈÄöÈ£éÊ†º',
      prompt: 'cute magical girl character',
      style: 'cartoon',
      expectedKeywords: ['cartoon', 'stylized', 'simplified', 'cute', 'chibi']
    }
  ];

  for (const testCase of testCases) {
    try {
      console.log(`\nüîç ÊµãËØï: ${testCase.name}`);
      console.log(`üìù ÊèêÁ§∫ËØç: ${testCase.prompt}`);
      console.log(`üé® È£éÊ†º: ${testCase.style}`);
      
      // ÂàõÂª∫ FormData
      const formData = new FormData();
      formData.append('prompt', testCase.prompt);
      formData.append('service', 'grsai');
      formData.append('options', JSON.stringify({
        style: testCase.style,
        pose: 'standing'
      }));

      console.log('üì§ ÂèëÈÄÅËØ∑Ê±Ç...');
      
      const response = await fetch('http://localhost:3000/api/generate/image', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer test_master_key_123'
        },
        body: formData
      });

      console.log(`üìä ÂìçÂ∫îÁä∂ÊÄÅ: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ API Ë∞ÉÁî®ÊàêÂäü!');
        
        if (data.url) {
          console.log(`üñºÔ∏è ÁîüÊàêÁöÑÂõæÂÉè URL: ${data.url}`);
          
          // Ê£ÄÊü•ÁîüÊàêÁöÑÊèêÁ§∫ËØçÊòØÂê¶ÂåÖÂê´ÊúüÊúõÁöÑÂÖ≥ÈîÆËØç
          console.log('üîç Ê£ÄÊü•ÁîüÊàêÁöÑÊèêÁ§∫ËØç...');
          
          // ËøôÈáåÊàë‰ª¨ÂèØ‰ª•ÈÄöËøáÊü•ÁúãÊúçÂä°Âô®Êó•ÂøóÊù•È™åËØÅÊèêÁ§∫ËØç
          // ÊàñËÄÖÊàë‰ª¨ÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊèêÁ§∫ËØçÁîüÊàêÊµãËØï
          const enhancedPrompt = generateEnhancedPrompt(testCase.prompt, testCase.style, false);
          console.log(`üìù Â¢ûÂº∫ÂêéÁöÑÊèêÁ§∫ËØç: ${enhancedPrompt}`);
          
          // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÊúüÊúõÁöÑÂÖ≥ÈîÆËØç
          const containsKeywords = testCase.expectedKeywords.some(keyword => 
            enhancedPrompt.toLowerCase().includes(keyword.toLowerCase())
          );
          
          if (containsKeywords) {
            console.log(`‚úÖ ÊèêÁ§∫ËØçÂåÖÂê´ÊúüÊúõÁöÑÂÖ≥ÈîÆËØç: ${testCase.expectedKeywords.join(', ')}`);
          } else {
            console.log(`‚ö†Ô∏è ÊèêÁ§∫ËØçÂèØËÉΩ‰∏çÂåÖÂê´ÊúüÊúõÁöÑÂÖ≥ÈîÆËØç`);
          }
        } else {
          console.log('‚ö†Ô∏è Êú™ËøîÂõûÂõæÂÉè URL');
        }
      } else {
        const errorData = await response.json();
        console.log('‚ùå API Ë∞ÉÁî®Â§±Ë¥•:', errorData);
      }
    } catch (error) {
      console.log(`‚ùå ÊµãËØïÂºÇÂ∏∏: ${error.message}`);
    }
  }

  console.log('\nüìä È£éÊ†ºÊµãËØïÂÆåÊàêÔºÅ');
  console.log('üí° ËØ∑Ê£ÄÊü•ÁîüÊàêÁöÑÂõæÂÉèÊòØÂê¶‰ΩìÁé∞‰∫Ü‰∏çÂêåÁöÑÈ£éÊ†ºÁâπÁÇπ');
};

// Ê®°ÊãüÊèêÁ§∫ËØçÁîüÊàêÈÄªËæëÔºà‰∏é API ‰∏≠ÁöÑÈÄªËæë‰∏ÄËá¥Ôºâ
const generateEnhancedPrompt = (prompt, style, hasImage) => {
  if (hasImage) {
    if (style === 'realistic') {
      return `realistic figure of ${prompt}, 1/7 scale figure, detailed, high quality, based on uploaded reference image, figure model, collectible figure, pose reference, character design, photorealistic style, realistic materials, detailed textures`;
    } else if (style === 'cartoon') {
      return `cartoon figure of ${prompt}, 1/7 scale figure, detailed, high quality, based on uploaded reference image, figure model, collectible figure, pose reference, character design, cartoon style, stylized, simplified, cute, chibi style`;
    } else {
      return `anime figure of ${prompt}, 1/7 scale figure, detailed, high quality, based on uploaded reference image, figure model, collectible figure, pose reference, character design, anime style, cel-shaded, vibrant colors`;
    }
  } else {
    if (style === 'realistic') {
      return `${prompt}, realistic figure, 1/7 scale figure, detailed, high quality, commercialized figure, figure model, collectible figure, photorealistic style, realistic materials, detailed textures, lifelike appearance`;
    } else if (style === 'cartoon') {
      return `${prompt}, cartoon figure, 1/7 scale figure, detailed, high quality, commercialized figure, figure model, collectible figure, cartoon style, stylized, simplified, cute, chibi style, playful design`;
    } else {
      return `${prompt}, anime figure, 1/7 scale figure, detailed, high quality, commercialized figure, figure model, collectible figure, anime style, cel-shaded, vibrant colors, manga style`;
    }
  }
};

// ËøêË°åÊµãËØï
testStyleDifferences();
